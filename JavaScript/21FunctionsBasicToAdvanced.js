/* Pure Functions
It takes an argument
It should return something
For same input you should get the same output
The result should not be influenced by outer parameter
It should not mutate the original argument
*/

//1.
function doubleValue(number){
    return number * 2;
    // number = number * 2;  // this will mutate(change) the original argument as the output will depend on the external parameter 
}

console.log(doubleValue(5)); 


//2.
function addValue(number1, number2){
    return number1 + number2;
}

console.log(addValue(5, 10));  // this will not mutate the original arguments as it doesn't change the result based on the external parameters



//Impure Functions
let number = 2;
function incrementValue(){
    number++;
    return number;  // this will mutate the original variable as the output will depend on the external parameter
}

console.log(incrementValue());  // this will print 3 as it will increment the original number value and return the updated value




//First Class Functions - A programming language is sdaid to have first calss function in that language are treated like other variables. So the function can be assigned to any other variable or pased as an argument or can be returned by another function
//1. Taking fuction as variable
let greetMessage = function(){
    console.log("Hello World");
}
greetMessage();



//2. Passed as arguments to other functions
function wrapperFunction() {
    return "Welcome to GeeksForGeeks!";
}

function greetMessage2(wrapper, name) {

    const message = wrapper();
    console.log(`${name}, ${message}`);
}

greetMessage2(wrapperFunction, "Prakash"); // Output: Prakash, Welcome to GeeksForGeeks!


//3. Returning a Function from Another Function
function greetMessage3() {
    function inner() {
        console.log("Prakash, Welcome to GeeksForGeeks!");
    };
    return inner;
}

//Calling function inside function
greetMessage3()();  // Output: Prakash, Welcome to GeeksForGeeks!





//Higher Order Functions - A function that takes one or more functions as arguments or returns a function as its result is called a higher-order function.

//1.In this example, displayMessage is a higher-order function because it accepts wrapper, another function, as an argument. The wrapper function is called within displayMessage, allowing us to dynamically insert different messages.
function wrapper() {
    return "Welcome to GFG";
}

function displayMessage(wrapper, name) {
    console.log(`${name}, ${wrapper()}`);
}

displayMessage(wrapper, "Prakash");              // Output: Prakash, Welcome to GFG



//2. Returning Functions from a Function - Higher-order functions can also return another function. 
/* displayMessage2 is a higher-order function because it returns another function. When displayMessage is called, it returns the inner function, which is then assigned to output. We can then call output() to execute the returned function. */
function displayMessage2() {
    return function() {
        console.log("Hello from the inner function");
    };
}

displayMessage2()();        // Output: Hello from the inner function



// //3.Combining Both Concepts
/* calculatePower is a higher-order function that returns a new function tailored to the specific power you want to apply. square and cube are both functions generated by calculatePower, each configured to raise numbers to the second and third power, respectively. */
function calculatePower(power) {
    return function(number) {
        return Math.pow(number, power);
    };
}

const square = calculatePower(2);
const cube = calculatePower(3);

console.log(square(4));     // Output: 16
console.log(cube(3));       // Output: 27 


//Note: Higher-order functions are a powerful concept in JavaScript, and they can greatly enhance the modularity, reusability, and maintainability of your code. They allow you to create more flexible, expressive, and maintainable functions.




//Rest parameter - The rest parameter is very similar to arguments Objects but it has some subtle differences. 
function calculateTotal(a,b,...arr){
console.log(a);
console.log(b);
console.log(arr);
}

calculateTotal(2,3,4,5,7,8,9,11.16);         /* Output: 2
                                                        3
                                                        [ 4, 5, 7, 8, 9, 11.16 ]    */ 


